default_platform(:ios)

opt_out_usage

before_all do
    ensure_xcode_version(version: "14.2")
    ensure_git_status_clean
    ensure_git_branch(branch: "develop")
    unless sh("git fetch --dry-run").empty?
        UI.user_error!("Git repository is not up to date")
    end
end

desc("Generates all icon sets and commits the changes.")
lane :generate_icons do
    Dir.chdir("..") do
        sh("for size in 20 29 40 58 60 76 80 87 120 152 167 180 1024; do rsvg-convert App/Icon.svg -w ${size} -o App/Assets.xcassets/AppIcon.appiconset/AppIcon-${size}x${size}.png; done")
        sh("for size in 20 29 40 58 60 76 80 87 120 152 167 180 1024; do rsvg-convert App/Icon.svg -w ${size} -o App/Assets.xcassets/AppIcon-debug.appiconset/AppIcon-${size}x${size}.png; done")
        sh("for size in 20 29 40 58 60 76 80 87 120 152 167 180 1024; do rsvg-convert Extension/Icon.svg -w ${size} -o Extension/Assets.xcassets/ExtensionIcon.appiconset/ExtensionIcon-${size}x${size}.png; done")
        sh("for icon in App/Assets.xcassets/AppIcon-debug.appiconset/*.png; do magick convert $icon -modulate 100,100,75 $icon; done")
        sh("for icon in Extension/Assets.xcassets/ExtensionIcon.appiconset/*.png; do magick convert $icon -fill white -colorize 100% $icon -compose CopyOpacity -composite $icon; done")
        sh("git add .")
        sh("git commit -m \"Update icons\"")
    end
end

desc("Takes all screenshots required for the App Store and commits the changes.")
lane :take_screenshots do
    # Screenshot specifications at https://help.apple.com/app-store-connect/#/devd274dd925
    devices = [
        "iPhone 14 Plus",
        "iPhone 14 Pro Max",
        "iPhone 14 Pro",
        "iPhone 14",
        "iPhone 8 Plus",
        "iPhone SE (3rd generation)",
        "iPhone SE (1st generation)",
        "iPad Pro (12.9-inch) (6th generation)",
        "iPad Pro (12.9-inch) (2nd generation)",
        "iPad Pro (11-inch) (4th generation)",
        "iPad Air (3rd generation)",
        "iPad (6th generation)"
    ]
    languages = ["en-US", "de-DE"]
    capture_screenshots(devices: devices, languages: languages, clear_previous_screenshots: true, override_status_bar: true, scheme: "Snapshot", number_of_retries: 0, stop_after_first_error: true)
    unless prompt(text: "Does the preview on path './fastlane/screenshots/screenshots.html' look okay for you?", boolean: true)
        reset_git_repo(force: true)
        UI.user_error!("Did not keep screenshots, because the HTML file was rejected by the user")
    end
    sh("git add .")
    sh("git commit -m \"Update screenshots\"")
end

desc("Bumps all version numbers and commits the version bump.")
desc("**Parameters**\n- `bump_type`: `major` or `minor` or `patch` (defaults to `patch`)")
lane :bump_version_numbers do |parameters|
    increment_version_number_in_xcodeproj(bump_type: parameters[:bump_type], omit_zero_patch_version: true, target: "Passwords")
    increment_version_number_in_xcodeproj(bump_type: parameters[:bump_type], omit_zero_patch_version: true, target: "Provider")
    increment_version_number_in_xcodeproj(bump_type: parameters[:bump_type], omit_zero_patch_version: true, target: "Extension")
    commit_version_bump(message: "Bump version numbers")
end

desc("Downloads certificates and provisioning profiles, bumps build numbers, archives the app, uploads the binary to TestFlight, distributes to public beta and commits the build bump.")
lane :build_and_upload do
    unless last_git_tag != "v#{get_version_number(target: "Passwords")}"
        UI.user_error!("The version number didn't change")
    end
    get_certificates(output_path: "fastlane/tmp")
    get_provisioning_profile(output_path: "fastlane/tmp", app_identifier: "de.cdslash.Passwords")
    get_provisioning_profile(output_path: "fastlane/tmp", app_identifier: "de.cdslash.Passwords.Provider")
    get_provisioning_profile(output_path: "fastlane/tmp", app_identifier: "de.cdslash.Passwords.Extension")
    increment_build_number_in_xcodeproj(target: "Passwords")
    increment_build_number_in_xcodeproj(target: "Provider")
    increment_build_number_in_xcodeproj(target: "Extension")
    build_app(scheme: "Passwords", clean: true, output_directory: "fastlane/tmp", export_method: "app-store")
    localized_app_info = {
        "en-US": {
            feedback_email: File.read("metadata/en-US/feedback_email.txt").strip,
            marketing_url: File.read("metadata/en-US/marketing_url.txt").strip,
            privacy_policy_url: File.read("metadata/en-US/privacy_url.txt").strip,
            description: File.read("metadata/en-US/description.txt").strip
        },
        "de-DE": {
            feedback_email: File.read("metadata/de-DE/feedback_email.txt").strip,
            marketing_url: File.read("metadata/de-DE/marketing_url.txt").strip,
            privacy_policy_url: File.read("metadata/de-DE/privacy_url.txt").strip,
            description: File.read("metadata/de-DE/description.txt").strip
        }
    }
    localized_build_info = {
        "en-US": {
            whats_new: File.read("metadata/en-US/release_notes.txt").strip
        },
        "de-DE": {
            whats_new: File.read("metadata/de-DE/release_notes.txt").strip
        }
    }
    upload_to_testflight(localized_app_info: localized_app_info, localized_build_info: localized_build_info, distribute_external: true, groups: ["Public Beta"])
    commit_version_bump(message: "Bump build numbers")
end

desc("Uploads all metadata to the App Store and promotes the latest TestFlight build.")
lane :promote_build do
    unless last_git_tag != "v#{get_version_number(target: "Passwords")}"
        UI.user_error!("The version number didn't change")
    end
    copyright = eval("\"#{File.read("metadata/copyright.txt").strip}\"")
    upload_to_app_store(app_version: get_version_number(target: "Passwords"), skip_binary_upload: true, overwrite_screenshots: true, copyright: copyright)
    app = Deliver.cache[:app]
    build = Spaceship::ConnectAPI::Build.all(app_id: app.id).first
    app.get_edit_app_store_version.select_build(build_id: build.id)
end

desc("Merges release into main branch and publishes as a GitHub release.")
lane :git_release do
    version = "v#{get_version_number(target: "Passwords")}"
    unless last_git_tag != version
        UI.user_error!("The version number didn't change")
    end
    release_notes = File.read("metadata/en-US/release_notes.txt").strip
    sh("git checkout main")
    sh("git merge develop -m \"#{version}\"")
    sh("git push")
    sh("git checkout develop")
    api_token = prompt(text: "Your GitHub API token: ", secure_text: true)
    set_github_release(repository_name: "johannes-schliephake/nextcloud-passwords-ios", api_token: api_token, tag_name: version, name: version, commitish: "main", description: release_notes)
    sh("git fetch --tags")
end
